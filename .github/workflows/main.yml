
name: Deploy Docker Image to EC2

on: 
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1. Checkout Repository
    - name: Checkout repository
      uses: actions/checkout@v4

      # Step 2: Set up AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Update to your AWS region


      # step 3. Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
      
    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ secrets.TERRAFORM_DIR }}

    # Step 5: Apply Terraform
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ secrets.TERRAFORM_DIR }}

    # Step 6: Extract EC2 Public IP from Terraform Output
    #- name: Get EC2 Public IP
    #  id: ec2-ip
    #  run: |
    #      terraform output -raw public_ip > ec2_public_ip.txt
    #      echo "EC2_PUBLIC_IP=$(cat ec2_public_ip.txt)" >> $GITHUB_ENV
    #      echo "EC2_PUBLIC_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
    #  working-directory: ${{ secrets.TERRAFORM_DIR }}


    # Step 7. Debug Output
    - name: Debug Output
      run: | 
        terraform output -raw public_ip | awk '{print $1 }' >> ec2_public_ip.txt
        cat ec2_public_ip.txt
      # echo "Raw output: $(terraform output -raw public_ip | awk '{print $1 }')"
      working-directory: ${{ secrets.TERRAFORM_DIR }}

      # Step 8. Apply Terraform
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ${{ secrets.TERRAFORM_DIR }}



      # step 4. Deploy Docker image to ec2
     # - name: Deploy Docker image to EC2
     # run: |
     #   ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
     #   docker pull crisxyrus/app-image:latest
     #   docker stop $(docker ps -a -q) || true
     #   docker run -d -p 80:80 ycrisxyrus/app-image:latest
     #   EOF