
name: Deploy Docker Image to EC2

on: 
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1. Checkout Repository
    - name: Checkout repository
      uses: actions/checkout@v4

      # Step 2: Set up AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Update to your AWS region


      # step 3. Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper:
        terraform_version: 1.5.0
      
    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ secrets.TERRAFORM_DIR }}

    # Step 5: Apply Terraform
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ secrets.TERRAFORM_DIR }}

    # Step 6: Extract EC2 Public IP from Terraform Output
    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
        PUBLIC_IP=$(terraform output -raw public_ip 2>/dev/null || echo "")
        echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
      working-directory: ${{ secrets.TERRAFORM_DIR }}

    #
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  
     # step 4. Deploy Docker image to ec2
    - name: Deploy Docker image to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.HOST_USER }}@$EC2_PUBLIC_IP << 'EOF'
          
        if ! [ -x "$(command -v docker)" ]; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
          fi  

        # Pull the Docker image
          sudo docker pull crisxyrus/app-image:latest

          # Stop and remove any existing container with the same name
          if [ "\$(sudo docker ps -aq -f name=$crisxyrus/app-image:latest)" ]; then
            sudo docker stop crisxyrus/app-image:latest
            sudo docker rm crisxyrus/app-image:latest
          fi

          # Run the Docker container
          sudo docker run -d --name test-app crisxyrus/app-image:latest
        EOF

          echo "Deployment completed successfully!"

        
     #   docker pull crisxyrus/app-image:latest
     #   docker stop $(docker ps -a -q) || true
     #   docker run -d -p 80:80 crisxyrus/app-image:latest
     #   EOF


     # Step 8. Apply Terraform
    #- name: Terraform Destroy
    #  run: terraform destroy -auto-approve
    #  working-directory: ${{ secrets.TERRAFORM_DIR }}